import os
import json
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import openai
import gspread
from google.oauth2.service_account import Credentials

# === –õ–û–ì–ò–†–û–í–ê–ù–ò–ï ===
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai.api_key = OPENAI_API_KEY

# === GOOGLE SHEETS ===
google_creds_json = os.environ.get("GOOGLE_CREDENTIALS")
if not google_creds_json:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –î–æ–±–∞–≤—å –µ—ë –≤ Render.")

creds_dict = json.loads(google_creds_json)
creds = Credentials.from_service_account_info(
    creds_dict,
    scopes=["https://www.googleapis.com/auth/spreadsheets"]
)
gc = gspread.authorize(creds)

SPREADSHEET_NAME = "AI Idea Lab Leads"
sheet = gc.open(SPREADSHEET_NAME).sheet1

# === –°–¢–ï–ô–¢ –î–õ–Ø –î–ò–ê–õ–û–ì–ê ===
user_states = {}

QUESTIONS = [
    "üí∞ –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ? (–º–æ–∂–Ω–æ 0, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π)",
    "üß† –ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
    "‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –≤ –Ω–µ–¥–µ–ª—é?"
]

# === –•–ï–ù–î–õ–ï–† –°–¢–ê–†–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_states[user_id] = {"step": 0, "answers": []}
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø ü§ñ AI Idea Lab. –ó–∞–¥–∞–º 3 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∏ –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è.")
    await update.message.reply_text(QUESTIONS[0])

# === –û–ë–†–ê–ë–û–¢–ö–ê –û–¢–í–ï–¢–û–í ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    if user_id not in user_states:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å üöÄ")
        return

    state = user_states[user_id]
    state["answers"].append(update.message.text)
    state["step"] += 1

    if state["step"] < len(QUESTIONS):
        await update.message.reply_text(QUESTIONS[state["step"]])
    else:
        await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10‚Äì20 —Å–µ–∫—É–Ω–¥ ‚åõ")
        ideas = await generate_ideas(state["answers"])
        await update.message.reply_text(ideas)

        # === –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ –≤ Google Sheets ===
        try:
            sheet.append_row([
                str(update.effective_user.first_name),
                str(update.effective_user.username),
                state["answers"][0],
                state["answers"][1],
                state["answers"][2]
            ])
            await update.message.reply_text("‚úÖ –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü–µ!")
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: %s", e)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É.")

        del user_states[user_id]

# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–î–ï–ô ===
async def generate_ideas(answers):
    budget, skills, time = answers

    prompt = f"""
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–ø—É—Å–∫—É –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–æ–≤. –î–∞–π 3 –∏–¥–µ–∏ –ø–æ–¥ —Ç–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è:
üí∞ –ë—é–¥–∂–µ—Ç: {budget}
üß† –ù–∞–≤—ã–∫–∏: {skills}
‚è± –í—Ä–µ–º—è –≤ –Ω–µ–¥–µ–ª—é: {time}

–î–ª—è –∫–∞–∂–¥–æ–π –∏–¥–µ–∏:
- üí° –ù–∞–∑–≤–∞–Ω–∏–µ
- üìã –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
- üöÄ 3 —à–∞–≥–∞ –∫ –∑–∞–ø—É—Å–∫—É
- üí∞ –ö–∞–∫ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å
"""

    client = openai.OpenAI(api_key=OPENAI_API_KEY)
    response = client.chat.completions.create(
        model="gpt-4o-mini",
        messages=[{"role": "system", "content": "–¢—ã –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –±–∏–∑–Ω–µ—Å—É."},
                  {"role": "user", "content": prompt}]
    )

    return response.choices[0].message.content.strip()

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()