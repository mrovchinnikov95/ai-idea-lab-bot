import os
import csv
import datetime
import asyncio
import threading
from http.server import SimpleHTTPRequestHandler, HTTPServer
from typing import Dict
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)
from openai import OpenAI

# –°–æ—Å—Ç–æ—è–Ω–∏—è –æ–ø—Ä–æ—Å–∞
STATE_BUDGET = "budget"
STATE_SKILLS = "skills"
STATE_TIME = "time"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
WELCOME = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ü§ñ AI Idea Lab. –ó–∞–¥–∞–º 3 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∏ –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è.\n\n"
    "üí∞ –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ —Ç—ã –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ? (–º–æ–∂–Ω–æ 0, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π)\n"
    "–ü—Ä–∏–º–µ—Ä—ã: 0, 1000, 5000"
)

# CSV –¥–ª—è –ª–∏–¥–æ–≤
def ensure_csv():
    if not os.path.exists("leads.csv"):
        with open("leads.csv", "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["timestamp", "user_id", "username", "budget", "skills", "time"])


def save_lead(user_id: int, username: str, data: Dict[str, str]):
    ensure_csv()
    with open("leads.csv", "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow(
            [
                datetime.datetime.utcnow().isoformat(),
                user_id,
                username or "",
                data.get("budget", ""),
                data.get("skills", ""),
                data.get("time", ""),
            ]
        )


# GPT –≥–µ–Ω–µ—Ä–∞—Ü–∏—è 3 –∏–¥–µ–π
async def gen_ideas_gpt(budget: int, skills: str, time_week: int) -> str:
    client = OpenAI(api_key=os.environ.get("OPENAI_API_KEY"))

    response = await asyncio.to_thread(
        lambda: client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∑–∞–ø—É—Å–∫—É –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–æ–≤."},
                {
                    "role": "user",
                    "content": f"""
üí∞ –ë—é–¥–∂–µ—Ç: {budget}‚ÇΩ
üß† –ù–∞–≤—ã–∫–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã: {skills}
‚è± –î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è: {time_week} —á–∞—Å–æ–≤ –≤ –Ω–µ–¥–µ–ª—é

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π 3 —Ä–∞–∑–Ω—ã–µ –∏–¥–µ–∏ –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞ 7‚Äì14 –¥–Ω–µ–π.
–§–æ—Ä–º–∞—Ç –∫–∞–∂–¥–æ–π –∏–¥–µ–∏:
üí° –ù–∞–∑–≤–∞–Ω–∏–µ  
üìã –ß—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º –Ω—É–∂–Ω–æ (2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)  
üöÄ 3 —à–∞–≥–∞ –∑–∞–ø—É—Å–∫–∞  
üí∞ –ö–∞–∫ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å
                    """,
                },
            ],
            temperature=0.9,
            max_tokens=1000,
        )
    )

    return response.choices[0].message.content.strip()


# –ö–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.user_data["state"] = STATE_BUDGET
    await update.message.reply_text(WELCOME, parse_mode="Markdown")


async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–Ø —Å–ø—Ä–æ—à—É üí∞ –±—é–¥–∂–µ—Ç, üß† –Ω–∞–≤—ã–∫–∏ –∏ ‚è± –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è, –∞ –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂—É 3 –∏–¥–µ–∏.\n–ö–æ–º–∞–Ω–¥—ã: /start, /pro, /help"
    )


async def pro_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üì© PRO-–æ—Ç—á—ë—Ç: –ø—Ä–∏—à–ª–∏ e-mail –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —è –∑–∞–Ω–µ—Å—É —Ç–µ–±—è –≤ —Å–ø–∏—Å–æ–∫ –∏ –ø—Ä–∏—à–ª—é, –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤–æ."
    )


# –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–∏–∞–ª–æ–≥–∞
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip()
    state = context.user_data.get("state")

    if state == STATE_BUDGET:
        try:
            budget = int(text.replace("$", " ").replace("‚ÇΩ", " ").split()[0])
        except Exception:
            return await update.message.reply_text("–£–∫–∞–∂–∏ —á–∏—Å–ª–æ. –ü—Ä–∏–º–µ—Ä—ã: 0, 1000, 5000")
        context.user_data["budget"] = str(budget)
        context.user_data["state"] = STATE_SKILLS
        return await update.message.reply_text(
            "üß† –ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã? (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)", parse_mode="Markdown"
        )

    if state == STATE_SKILLS:
        context.user_data["skills"] = text
        context.user_data["state"] = STATE_TIME
        kb = ReplyKeyboardMarkup(
            [["3‚Äì5 —á–∞—Å–æ–≤/–Ω–µ–¥", "5‚Äì10 —á–∞—Å–æ–≤/–Ω–µ–¥", ">10 —á–∞—Å–æ–≤/–Ω–µ–¥"]],
            one_time_keyboard=True,
            resize_keyboard=True,
        )
        return await update.message.reply_text(
            "‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –≤ –Ω–µ–¥–µ–ª—é?", reply_markup=kb
        )

    if state == STATE_TIME:
        context.user_data["time"] = text
        context.user_data["state"] = None

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥
        save_lead(
            update.effective_user.id,
            update.effective_user.username,
            context.user_data,
        )

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await update.message.reply_text(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏... —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å 10‚Äì20 —Å–µ–∫—É–Ω–¥ ‚åõ"
        )

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–¥–µ–π —á–µ—Ä–µ–∑ GPT
        budget = int(context.user_data.get("budget", "0"))
        skills = context.user_data.get("skills", "")
        time_week = 5
        ideas = await gen_ideas_gpt(budget, skills, time_week)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await update.message.reply_text(
            "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç 3 –∏–¥–µ–∏ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è:\n\n" + ideas,
            reply_markup=ReplyKeyboardRemove(),
        )
        return await update.message.reply_text(
            "üì© –•–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å PRO-–æ—Ç—á—ë—Ç —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –ø–ª–∞–Ω–æ–º, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏ –∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏? –ù–∞–ø–∏—à–∏ —Å–≤–æ–π e-mail –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π /pro"
        )

    # –ï—Å–ª–∏ –ø—Ä–∏—Å–ª–∞–ª–∏ e-mail
    if "@" in text and "." in text:
        ensure_csv()
        with open("pro_requests.csv", "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(
                [
                    datetime.datetime.utcnow().isoformat(),
                    update.effective_user.id,
                    update.effective_user.username,
                    text,
                ]
            )
        return await update.message.reply_text(
            "‚úÖ –°—É–ø–µ—Ä! –¢—ã –≤ —Å–ø–∏—Å–∫–µ –æ–∂–∏–¥–∞–Ω–∏—è PRO-–≤–µ—Ä—Å–∏–∏ üì¨."
        )

    return await update.message.reply_text("–ù–∞–∂–º–∏ /start, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä, –∏–ª–∏ /help")


# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    token = os.environ.get("TELEGRAM_BOT_TOKEN")
    if not token:
        raise RuntimeError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ Secrets.")

    app = (
        ApplicationBuilder()
        .token(token)
        .build()
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("pro", pro_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("ü§ñ Bot is running...")
    app.run_polling()


if __name__ == "__main__":
    # üí° –§–µ–π–∫–æ–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
    def run_server():
        port = int(os.environ.get("PORT", 8000))
        server = HTTPServer(("0.0.0.0", port), SimpleHTTPRequestHandler)
        print(f"üåê Dummy server running on port {port}")
        server.serve_forever()

    threading.Thread(target=run_server, daemon=True).start()

    main()