import os
import json
import logging
from datetime import datetime

import gspread
from google.oauth2.service_account import Credentials

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

from openai import OpenAI

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME", "AI Idea Lab Leads")
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL")  # https://<your>.onrender.com
PORT = int(os.getenv("PORT", "8000"))

# –°–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞. –ï—Å–ª–∏ –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º —Ç–æ–∫–µ–Ω (–Ω–∞–¥—ë–∂–Ω–æ –∏ –ø—Ä–æ—Å—Ç–æ).
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", TELEGRAM_TOKEN)

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

if not OPENAI_API_KEY:
    log.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∏–¥–µ–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.")

# ---------- Google Sheets ----------
def connect_sheet():
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    if not creds_json:
        raise RuntimeError("GOOGLE_CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω")

    try:
        creds_dict = json.loads(creds_json)
    except json.JSONDecodeError:
        raise RuntimeError("GOOGLE_CREDENTIALS_JSON: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")

    creds = Credentials.from_service_account_info(
        creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )
    client = gspread.authorize(creds)
    sh = client.open_by_key("1uo3yOGDLrA5d9PCeZSEfVepcIuk3raYlFKTpFeVlWgQ")
    log.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheet: %s", SPREADSHEET_NAME)

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
    ws = sh.sheet1
    headers = ws.row_values(1)
    wanted = ["timestamp", "chat_id", "budget", "skills", "time_per_week", "ideas_text"]
    if headers != wanted:
        ws.clear()
        ws.append_row(wanted)
    return ws

SHEET = connect_sheet()

# ---------- OpenAI ----------
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

def generate_ideas(budget: str, skills: str, time_per_week: str) -> str:
    fallback = (
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç 3 –∏–¥–µ–∏ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è:\n\n"
        "1) –ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∏—à–∏, –≥–¥–µ —Ç—ã —à–∞—Ä–∏—à—å (—à–∞–±–ª–æ–Ω—ã + –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∏).\n"
        "2) –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å –ò–ò-–æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ–¥–ø–∏—Å–∫–∞).\n"
        "3) –ü–∞–∫–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤/–≤–æ—Ä–∫—Ñ–ª–æ—É –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–æ–ª—å (—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ + –∞–ø—Å–µ–π–ª).\n"
    )
    if not client:
        return fallback

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç—Ä–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–¥–µ–∏ –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞ –Ω–∞ –±–∞–∑–µ –ò–ò-—á–∞—Ç–æ–≤.
–£—Å–ª–æ–≤–∏—è:
- –ë—é–¥–∂–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç: {budget}
- –ù–∞–≤—ã–∫–∏/–∏–Ω—Ç–µ—Ä–µ—Å—ã: {skills}
- –í—Ä–µ–º—è –≤ –Ω–µ–¥–µ–ª—é: {time_per_week}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
‚Äî –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
‚Äî –ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
‚Äî 3 —à–∞–≥–∞ —Å—Ç–∞—Ä—Ç–∞
‚Äî –ö–∞–∫ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å (1‚Äì2 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
–°–¥–µ–ª–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ –∏ –ø–æ –¥–µ–ª—É.
"""
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –±–∏–∑–Ω–µ—Å—ã –Ω–∞ –ò–ò, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=700,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.error("OpenAI error: %s", e)
        return fallback

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ----------
BUDGET, SKILLS, TIMEPW = range(3)

START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ü§ñ *AI Idea Lab*.\n"
    "–ó–∞–¥–∞–º 3 –≤–æ–ø—Ä–æ—Å–∞ –∏ –ø–æ–¥–±–µ—Ä—É –∏–¥–µ–∏ –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è.\n\n"
    "üí∞ –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ?\n"
    "_–ü—Ä–∏–º–µ—Ä—ã: 0, 1000, 5000_"
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(START_TEXT, parse_mode="Markdown")
    return BUDGET

async def catch_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = (update.message.text or "").strip()
    await update.message.reply_text("üß† –ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã? _–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é_", parse_mode="Markdown")
    return SKILLS

async def catch_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["skills"] = (update.message.text or "").strip()
    await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –≤ –Ω–µ–¥–µ–ª—é?\n_–ü—Ä–∏–º–µ—Ä: >10 —á–∞—Å–æ–≤/–Ω–µ–¥_", parse_mode="Markdown")
    return TIMEPW

async def catch_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["time_per_week"] = (update.message.text or "").strip()
    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏... —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚åõ")

    budget = context.user_data.get("budget", "")
    skills = context.user_data.get("skills", "")
    timepw = context.user_data.get("time_per_week", "")

    ideas = generate_ideas(budget, skills, timepw)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∏–¥ –≤ Google Sheet
    try:
        SHEET.append_row([
            datetime.utcnow().isoformat(),
            str(update.effective_chat.id),
            budget,
            skills,
            timepw,
            ideas
        ])
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheet: %s", e)

    # ‚úâÔ∏è –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞
    try:
        admin_chat_id = 6159527584  # —Ç–≤–æ–π chat_id
        await context.bot.send_message(
            chat_id=admin_chat_id,
            text=(
                "üì• –ù–æ–≤—ã–π –ª–∏–¥!\n\n"
                f"üí∞ –ë—é–¥–∂–µ—Ç: {budget}\n"
                f"üß† –ù–∞–≤—ã–∫–∏: {skills}\n"
                f"‚è± –í—Ä–µ–º—è: {timepw}\n\n"
                f"üí° –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–¥–µ–∏:\n{ideas}"
            )
        )
    except Exception as e:
        log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: %s", e)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = (
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –∏–¥–µ–∏ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è:\n\n"
        f"{ideas}\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ */more* –∏ —è –¥–æ–∫–∏–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –∑–∞–ø—É—Å–∫–∞."
    )
    await update.message.reply_text(text, parse_mode="Markdown")
    return ConversationHandler.END

async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîß –î–æ–ø.—à–∞–≥–∏:\n"
        "1) –í—ã–±–µ—Ä–∏ 1 –∏–¥–µ—é –∏ –æ–ø–∏—à–∏ –µ—ë –≤ 10 —Å—Ç—Ä–æ–∫ (—á—Ç–æ/–¥–ª—è –∫–æ–≥–æ/—Ü–µ–Ω–Ω–æ—Å—Ç—å).\n"
        "2) –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ 10 –º–µ—Å—Ç, –≥–¥–µ –µ—Å—Ç—å —Ç–≤–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (—á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã/—Ñ–æ—Ä—É–º—ã).\n"
        "3) –ü–æ–¥–≥–æ—Ç–æ–≤—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–¥-–º–∞–≥–Ω–∏—Ç (—á–µ–∫-–ª–∏—Å—Ç/—à–∞–±–ª–æ–Ω) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –µ–≥–æ.\n"
        "4) –°–¥–µ–ª–∞–π 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–∏–¥–±–µ–∫—É.\n\n"
        "–ì–æ—Ç–æ–≤ –≤—ã–¥–∞—Ç—å –µ—â—ë? –ù–∞–ø–∏—à–∏ */start*.",
        parse_mode="Markdown",
    )

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫, –∑–∞–≤–µ—Ä—à–∞—é. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /start, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")
    return ConversationHandler.END

def build_app() -> Application:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_budget)],
            SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_skills)],
            TIMEPW: [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)
    app.add_handler(CommandHandler("more", more))
    return app

if __name__ == "__main__":
    app = build_app()
    webhook_url = f"{WEBHOOK_BASE_URL.rstrip('/')}/{WEBHOOK_PATH}"
    log.info("üåê –ó–∞–ø—É—Å–∫–∞—é webhook: %s", webhook_url)

    app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=WEBHOOK_PATH,
        webhook_url=webhook_url,
        drop_pending_updates=True
    )
