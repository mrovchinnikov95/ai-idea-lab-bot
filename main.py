import os
import json
import logging
import hashlib
import time
from datetime import datetime, timedelta

import gspread
from google.oauth2.service_account import Credentials

from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

from openai import OpenAI

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME", "AI Idea Lab Leads")
WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL")  # https://<your>.onrender.com (–¥–ª—è Render)
PORT = int(os.getenv("PORT", "8000"))
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", TELEGRAM_TOKEN)  # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")  # —Å—Ç—Ä–æ–∫–æ–π; –Ω–∞–ø—Ä., "6159527584"
RETENTION_DAYS = int(os.getenv("RETENTION_DAYS", "30"))
HASH_SALT = os.getenv("HASH_SALT", "ai-idea-lab-salt")  # –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Å—Ç—Ä–æ–∫–∞
LOG_SHEET_ID = os.getenv("LOG_SHEET_ID")  # ID Google Sheet –¥–ª—è –ª–æ–≥–æ–≤ (open_by_key)

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

if not OPENAI_API_KEY:
    log.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∏–¥–µ–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.")

# ---------- Google Sheets ----------
def _gc_client():
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    if not creds_json:
        raise RuntimeError("GOOGLE_CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω")
    try:
        creds_dict = json.loads(creds_json)
    except json.JSONDecodeError:
        raise RuntimeError("GOOGLE_CREDENTIALS_JSON: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")

    creds = Credentials.from_service_account_info(
        creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )
    return gspread.authorize(creds)

def connect_sheet():
    client = _gc_client()
    sh = client.open_by_key("1uo3yOGDLrA5d9PCeZSEfVepcIuk3raYlFKTpFeVlWgQ")
    log.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheet: %s", SPREADSHEET_NAME)
    ws = sh.sheet1
    headers = ws.row_values(1)
    wanted = ["timestamp", "chat_id_hash", "budget", "skills", "time_per_week", "ideas_text"]
    if headers != wanted:
        ws.clear()
        ws.append_row(wanted)
    return ws

def connect_log_sheet():
    """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ –ª–æ–≥–æ–≤ (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–ª—è). –ë–µ–∑–æ–ø–∞—Å–Ω–æ: —Ç–æ–ª—å–∫–æ —Ö—ç—à –∏ —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è."""
    if not LOG_SHEET_ID:
        log.warning("‚ö†Ô∏è LOG_SHEET_ID –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ Sheets –≤—ã–∫–ª—é—á–µ–Ω–æ.")
        return None
    try:
        client = _gc_client()
        sh = client.open_by_key(LOG_SHEET_ID)
        ws = sh.sheet1  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –ª–∏—Å—Ç
        headers = ws.row_values(1)
        wanted = ["timestamp", "chat_id_hash", "event"]
        if headers != wanted:
            ws.clear()
            ws.append_row(wanted)
        log.info("üìù –õ–æ–≥-—Ç–∞–±–ª–∏—Ü–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
        return ws
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª–æ–≥-—Ç–∞–±–ª–∏—Ü—É: %s", e)
        return None

SHEET = connect_sheet()
LOGS_WS = connect_log_sheet()

def prune_old_rows(ws, retention_days: int = 30):
    """–ú—è–≥–∫–∞—è —á–∏—Å—Ç–∫–∞: —É–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ä—à–µ retention_days (–µ—Å–ª–∏ timestamp –≤–∞–ª–∏–¥–µ–Ω)."""
    try:
        data = ws.get_all_values()
        if len(data) <= 1:
            return
        cutoff = datetime.utcnow() - timedelta(days=retention_days)
        to_delete = []
        for idx, row in enumerate(data[1:], start=2):
            ts = row[0].strip() if len(row) > 0 else ""
            try:
                dt = datetime.fromisoformat(ts)
                if dt < cutoff:
                    to_delete.append(idx)
            except Exception:
                continue
        deleted = 0
        for r in reversed(to_delete):
            ws.delete_rows(r)
            deleted += 1
        log.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É–¥–∞–ª–µ–Ω–æ %d —Å—Ç—Ä–æ–∫, –æ—Å—Ç–∞–ª–æ—Å—å %d –∑–∞–ø–∏—Å–µ–π", deleted, len(ws.get_all_values()) - 1)
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ—á–∏—Å—Ç–∫—É: %s", e)

prune_old_rows(SHEET, RETENTION_DAYS)

# ---------- OpenAI ----------
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

def generate_ideas(budget: str, skills: str, time_per_week: str) -> str:
    fallback = (
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç 3 –∏–¥–µ–∏ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è:\n\n"
        "1) –ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∏—à–∏, –≥–¥–µ —Ç—ã —à–∞—Ä–∏—à—å (—à–∞–±–ª–æ–Ω—ã + –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∏).\n"
        "2) –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å –ò–ò-–æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ–¥–ø–∏—Å–∫–∞).\n"
        "3) –ü–∞–∫–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤/–≤–æ—Ä–∫—Ñ–ª–æ—É –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–æ–ª—å (—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ + –∞–ø—Å–µ–π–ª).\n"
    )
    if not client:
        return fallback

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç—Ä–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–¥–µ–∏ –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞ –Ω–∞ –±–∞–∑–µ –ò–ò-—á–∞—Ç–æ–≤.
–£—Å–ª–æ–≤–∏—è:
- –ë—é–¥–∂–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç: {budget}
- –ù–∞–≤—ã–∫–∏/–∏–Ω—Ç–µ—Ä–µ—Å—ã: {skills}
- –í—Ä–µ–º—è –≤ –Ω–µ–¥–µ–ª—é: {time_per_week}

–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
‚Äî –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
‚Äî –ß—Ç–æ —ç—Ç–æ –¥–∞—ë—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
‚Äî 3 —à–∞–≥–∞ —Å—Ç–∞—Ä—Ç–∞
‚Äî –ö–∞–∫ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å (1‚Äì2 –≤–∞—Ä–∏–∞–Ω—Ç–∞)
–°–¥–µ–ª–∞–π –ª–∞–∫–æ–Ω–∏—á–Ω–æ –∏ –ø–æ –¥–µ–ª—É.
"""
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –±–∏–∑–Ω–µ—Å—ã –Ω–∞ –ò–ò, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=700,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.error("OpenAI error: %s", e)
        return fallback

# ---------- –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã ----------
def hash_chat_id(chat_id: int) -> str:
    s = f"{HASH_SALT}:{chat_id}".encode("utf-8")
    return hashlib.sha256(s).hexdigest()

def log_event(chat_id: int, event: str):
    """–õ–æ–≥–∏—Ä—É–µ–º –º–∏–Ω–∏–º—É–º: timestamp, chat_id_hash, event."""
    if not LOGS_WS:
        return
    try:
        LOGS_WS.append_row([datetime.utcnow().isoformat(), hash_chat_id(chat_id), event])
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ (%s): %s", event, e)

# –ê–Ω—Ç–∏—Å–ø–∞–º: 1 —Å–æ–±—ã—Ç–∏–µ / 2 —Å–µ–∫ –Ω–∞ —á–∞—Ç
_LAST_EVENT_AT = {}
RATE_WINDOW_SEC = 2.0
def rate_ok(chat_id: int) -> bool:
    now = time.monotonic()
    last = _LAST_EVENT_AT.get(chat_id, 0.0)
    if now - last < RATE_WINDOW_SEC:
        return False
    _LAST_EVENT_AT[chat_id] = now
    return True

# ---------- –¢–µ–∫—Å—Ç—ã /privacy –∏ /terms ----------
PRIVACY_TEXT = (
    "*–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏*\n\n"
    "AI Idea Lab –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã —Å–∞–º –≤–≤–æ–¥–∏—à—å –≤ —á–∞—Ç-–±–æ—Ç–µ "
    "(–±—é–¥–∂–µ—Ç, –Ω–∞–≤—ã–∫–∏, –≤—Ä–µ–º—è –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã).\n\n"
    "–ú—ã *–Ω–µ —Å–æ–±–∏—Ä–∞–µ–º –∏ –Ω–µ —Ö—Ä–∞–Ω–∏–º*: –∏–º–µ–Ω–∞, —Ç–µ–ª–µ—Ñ–æ–Ω—ã, email, –∞–¥—Ä–µ—Å–∞; —Ñ–∏–Ω–∞–Ω—Å–æ–≤—É—é/–º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é; "
    "–∏–Ω—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –ø–æ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±—è –º–æ–∂–Ω–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å.\n\n"
    "–î–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è *–∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ* –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–¥–µ–π –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞ –∏ –∏—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å –ø–æ–º–æ—â—å—é –ò–ò. "
    "–ú—ã –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–µ—Ç—å–∏–º –ª–∏—Ü–∞–º –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è —Ä–µ–∫–ª–∞–º—ã.\n\n"
    "–î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π –∏–ª–∏ –ø–æ —Ç–≤–æ–µ–º—É –∑–∞–ø—Ä–æ—Å—É –∫–æ–º–∞–Ω–¥–æ–π /erase.\n"
)

TERMS_TEXT = (
    "*–£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è*\n\n"
    "1) –ò—Å–ø–æ–ª—å–∑—É—è –±–æ—Ç AI Idea Lab, —Ç—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—à—å, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è —Å /privacy –∏ —Å–æ–≥–ª–∞—Å–µ–Ω —Å –Ω–∏–º.\n"
    "2) –û—Ç–≤–µ—Ç—ã –±–æ—Ç–∞ –Ω–æ—Å—è—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä –∏ –Ω–µ —è–≤–ª—è—é—Ç—Å—è —é—Ä–∏–¥–∏—á–µ—Å–∫–æ–π/—Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π.\n"
    "3) –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–¥–µ–π –ª–µ–∂–∏—Ç –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ.\n"
    "4) –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ —É—Å–ª–æ–≤–∏—è –º–æ–≥—É—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è ‚Äî –∞–∫—Ç—É–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∑–¥–µ—Å—å.\n"
    "5) –ï—Å–ª–∏ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω ‚Äî –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –±–æ—Ç.\n"
)

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ----------
CONSENT, BUDGET, SKILLS, TIMEPW = range(4)

START_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ü§ñ *AI Idea Lab*.\n\n"
    "–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º: —è –æ–±—Ä–∞–±–æ—Ç–∞—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã (–±—é–¥–∂–µ—Ç/–Ω–∞–≤—ã–∫–∏/–≤—Ä–µ–º—è) —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–¥–µ–π. "
    "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /privacy –∏ /terms.\n\n"
    "–ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω ‚Äî –Ω–∞–ø–∏—à–∏ *–°–û–ì–õ–ê–°–ï–ù* (–∏–º–µ–Ω–Ω–æ —ç—Ç–æ —Å–ª–æ–≤–æ)."
)

# ---------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return
    log_event(update.effective_chat.id, "start")
    await update.message.reply_text(START_TEXT, parse_mode=ParseMode.MARKDOWN)
    return CONSENT

async def consent_catch(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return CONSENT
    text = (update.message.text or "").strip().upper()
    if text != "–°–û–ì–õ–ê–°–ï–ù":
        await update.message.reply_text(
            "–ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–ø–∏—à–∏ *–°–û–ì–õ–ê–°–ï–ù*. "
            "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–∞–≤–∏–ª–∞: /privacy –∏ /terms",
            parse_mode=ParseMode.MARKDOWN
        )
        return CONSENT

    log_event(update.effective_chat.id, "consent_accepted")
    await update.message.reply_text(
        "–û–∫! –ù–∞—á–∏–Ω–∞–µ–º.\n\n"
        "üí∞ –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ?\n_–ü—Ä–∏–º–µ—Ä—ã: 0, 1000, 5000_",
        parse_mode=ParseMode.MARKDOWN
    )
    return BUDGET

async def catch_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return BUDGET
    context.user_data["budget"] = (update.message.text or "").strip()
    log_event(update.effective_chat.id, "budget_provided")
    await update.message.reply_text("üß† –ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã? _–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é_", parse_mode=ParseMode.MARKDOWN)
    return SKILLS

async def catch_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return SKILLS
    context.user_data["skills"] = (update.message.text or "").strip()
    log_event(update.effective_chat.id, "skills_provided")
    await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –≤ –Ω–µ–¥–µ–ª—é?\n_–ü—Ä–∏–º–µ—Ä: >10 —á–∞—Å–æ–≤/–Ω–µ–¥_", parse_mode=ParseMode.MARKDOWN)
    return TIMEPW

async def catch_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return ConversationHandler.END
    context.user_data["time_per_week"] = (update.message.text or "").strip()
    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏... —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚åõ")

    budget = context.user_data.get("budget", "")
    skills = context.user_data.get("skills", "")
    timepw = context.user_data.get("time_per_week", "")

    ideas = generate_ideas(budget, skills, timepw)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∏–Ω–∏–º—É–º –∏ —Ç–æ–ª—å–∫–æ —Ö—ç—à —á–∞—Ç–∞
    try:
        chat_id_hash = hash_chat_id(update.effective_chat.id)
        SHEET.append_row([
            datetime.utcnow().isoformat(),
            chat_id_hash,
            budget,
            skills,
            timepw,
            ideas
        ])
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheet: %s", e)

    log_event(update.effective_chat.id, "ideas_generated")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω)
    try:
        if ADMIN_CHAT_ID:
            await context.bot.send_message(
                chat_id=int(ADMIN_CHAT_ID),
                text=(
                    "üì• *–ù–æ–≤—ã–π –ª–∏–¥!*\n\n"
                    f"üí∞ –ë—é–¥–∂–µ—Ç: {budget}\n"
                    f"üß† –ù–∞–≤—ã–∫–∏: {skills}\n"
                    f"‚è± –í—Ä–µ–º—è: {timepw}\n\n"
                    f"üí° –ò–¥–µ–∏:\n{ideas}"
                ),
                parse_mode=ParseMode.MARKDOWN
            )
    except Exception as e:
        log.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É: %s", e)

    await update.message.reply_text(
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –∏–¥–µ–∏ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è:\n\n"
        f"{ideas}\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ */more* –∏ —è –¥–æ–∫–∏–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –∑–∞–ø—É—Å–∫–∞.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /privacy /terms /erase /about",
        parse_mode=ParseMode.MARKDOWN
    )
    return ConversationHandler.END

async def more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return
    log_event(update.effective_chat.id, "more")
    await update.message.reply_text(
        "üîß –î–æ–ø.—à–∞–≥–∏:\n"
        "1) –í—ã–±–µ—Ä–∏ 1 –∏–¥–µ—é –∏ –æ–ø–∏—à–∏ –µ—ë –≤ 10 —Å—Ç—Ä–æ–∫ (—á—Ç–æ/–¥–ª—è –∫–æ–≥–æ/—Ü–µ–Ω–Ω–æ—Å—Ç—å).\n"
        "2) –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ 10 –º–µ—Å—Ç, –≥–¥–µ –µ—Å—Ç—å —Ç–≤–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (—á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã/—Ñ–æ—Ä—É–º—ã).\n"
        "3) –ü–æ–¥–≥–æ—Ç–æ–≤—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–¥-–º–∞–≥–Ω–∏—Ç (—á–µ–∫-–ª–∏—Å—Ç/—à–∞–±–ª–æ–Ω) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –µ–≥–æ.\n"
        "4) –°–¥–µ–ª–∞–π 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–∏–¥–±–µ–∫—É.\n\n"
        "–ì–æ—Ç–æ–≤ –≤—ã–¥–∞—Ç—å –µ—â—ë? –ù–∞–ø–∏—à–∏ */start*.",
        parse_mode=ParseMode.MARKDOWN,
    )

async def privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return
    log_event(update.effective_chat.id, "privacy")
    await update.message.reply_text(PRIVACY_TEXT, parse_mode=ParseMode.MARKDOWN)

async def terms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return
    log_event(update.effective_chat.id, "terms")
    await update.message.reply_text(TERMS_TEXT, parse_mode=ParseMode.MARKDOWN)

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return
    log_event(update.effective_chat.id, "about")
    await update.message.reply_text(
        "ü§ñ *AI Idea Lab*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–¥–±–∏—Ä–∞–µ—Ç –∏–¥–µ–∏ –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞ –ø–æ–¥ —Ç–≤–æ–π –±—é–¥–∂–µ—Ç, –Ω–∞–≤—ã–∫–∏ –∏ –≤—Ä–µ–º—è.\n\n"
        "üìä –ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:\n"
        "1Ô∏è‚É£ –û—Ç–≤–µ—á–∞–µ—à—å –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞.\n"
        "2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ—à—å 3 —Ä–µ–∞–ª—å–Ω—ã–µ –∏–¥–µ–∏ —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø–ª–∞–Ω–æ–º.\n"
        "3Ô∏è‚É£ –ú–æ–∂–µ—à—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤—Å–µ–≥–æ –∑–∞ 7 –¥–Ω–µ–π.\n\n"
        "üîß –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Ä –∏–¥–µ–π\n"
        "/privacy ‚Äî –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏\n"
        "/terms ‚Äî —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n"
        "/erase ‚Äî —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ",
        parse_mode=ParseMode.MARKDOWN
    )

async def erase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return
    """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ —Å—Ç—Ä–æ–∫–∏, –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ chat_id_hash)."""
    log_event(update.effective_chat.id, "erase_called")
    try:
        chat_id_hash = hash_chat_id(update.effective_chat.id)
        data = SHEET.get_all_values()
        if len(data) <= 1:
            await update.message.reply_text("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å ‚Äî –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç.")
            return

        to_delete = []
        for idx, row in enumerate(data[1:], start=2):
            if len(row) > 1 and row[1] == chat_id_hash:
                to_delete.append(idx)

        if not to_delete:
            await update.message.reply_text("–î–∞–Ω–Ω—ã—Ö –ø–æ —Ç–µ–±–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –£–∂–µ —á–∏—Å—Ç–æ ‚ú®")
            return

        for r in reversed(to_delete):
            SHEET.delete_rows(r)
        log_event(update.effective_chat.id, f"erase_done:{len(to_delete)}")
        await update.message.reply_text(f"–ì–æ—Ç–æ–≤–æ. –£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(to_delete)} ‚úÖ")
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ /erase: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# ---------- –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ----------
async def admin_clear_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return ConversationHandler.END
    if str(update.effective_chat.id) != str(ADMIN_CHAT_ID):
        await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    log_event(update.effective_chat.id, "admin_clear_requested")
    await update.message.reply_text(
        "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: —ç—Ç–æ —É–¥–∞–ª–∏—Ç *–≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π* –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è.\n\n"
        "–ï—Å–ª–∏ —Ç—ã —Ç–æ—á–Ω–æ —É–≤–µ—Ä–µ–Ω ‚Äî –Ω–∞–ø–∏—à–∏: –ü–û–î–¢–í–ï–†–ñ–î–ê–Æ"
    )
    return 1

async def admin_clear_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return ConversationHandler.END
    if str(update.effective_chat.id) != str(ADMIN_CHAT_ID):
        await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END

    if update.message.text.strip().upper() == "–ü–û–î–¢–í–ï–†–ñ–î–ê–Æ":
        try:
            SHEET.clear()
            SHEET.append_row(["timestamp", "chat_id_hash", "budget", "skills", "time_per_week", "ideas_text"])
            log_event(update.effective_chat.id, "admin_clear_done")
            await update.message.reply_text("üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã ‚úÖ")
        except Exception as e:
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–µ: %s", e)
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    else:
        await update.message.reply_text("‚ùå –û—á–∏—Å—Ç–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫, –∑–∞–≤–µ—Ä—à–∞—é. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /start, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")
    return ConversationHandler.END

async def not_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not rate_ok(update.effective_chat.id):
        return
    log_event(update.effective_chat.id, "non_text_message")
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å —Ç–µ–∫—Å—Ç–æ–º. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ ‚Äî /start")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    log.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–ø–¥–µ–π—Ç–∞: %s", context.error)
    try:
        if isinstance(update, Update) and update.effective_message:
            await update.effective_message.reply_text("–û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ üôè")
    except Exception:
        pass

# ---------- Application ----------
def build_app() -> Application:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CONSENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, consent_catch)],
            BUDGET:  [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_budget)],
            SKILLS:  [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_skills)],
            TIMEPW:  [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_time)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )

    app.add_handler(conv)
    app.add_handler(CommandHandler("more", more))
    app.add_handler(CommandHandler("privacy", privacy))
    app.add_handler(CommandHandler("terms", terms))
    app.add_handler(CommandHandler("erase", erase))
    app.add_handler(CommandHandler("about", about))
    # --- –ö–æ–º–∞–Ω–¥–∞ –ø–æ–ª–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω) ---
    admin_clear_conv = ConversationHandler(
        entry_points=[CommandHandler("admin_clear", admin_clear_start)],
        states={1: [MessageHandler(filters.TEXT & ~filters.COMMAND, admin_clear_confirm)]},
        fallbacks=[],
    )
    app.add_handler(admin_clear_conv)

    app.add_handler(MessageHandler(~filters.TEXT & ~filters.COMMAND, not_text))
    app.add_error_handler(error_handler)
    return app

# ---------- –ó–∞–ø—É—Å–∫ ----------
if __name__ == "__main__":
    app = build_app()

    if WEBHOOK_BASE_URL:
        webhook_url = f"{WEBHOOK_BASE_URL.rstrip('/')}/{WEBHOOK_PATH}"
        log.info("üåê –ó–∞–ø—É—Å–∫–∞—é webhook: %s", webhook_url)

        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=WEBHOOK_PATH,
            webhook_url=webhook_url,
            drop_pending_updates=True,
            stop_signals=None,
        )
    else:
        log.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        app.run_polling(drop_pending_updates=True)
