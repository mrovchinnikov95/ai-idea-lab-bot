import os
import json
import logging
import hashlib
from datetime import datetime, timedelta

import gspread
from google.oauth2.service_account import Credentials

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters,
    ContextTypes, ConversationHandler
)

from openai import OpenAI

# ---------- –õ–æ–≥–∏ ----------
logging.basicConfig(level=logging.INFO)
log = logging.getLogger(__name__)

# ---------- ENV ----------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_NAME = os.getenv("SPREADSHEET_NAME", "AI Idea Lab Leads")

WEBHOOK_BASE_URL = os.getenv("WEBHOOK_BASE_URL")  # –µ—Å–ª–∏ –∑–∞–¥–∞–Ω, —Ä–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ webhook
PORT = int(os.getenv("PORT", "8000"))
WEBHOOK_PATH = os.getenv("WEBHOOK_PATH", TELEGRAM_TOKEN)  # —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞

ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "0"))  # 6159527584 (–∑–∞–ø–æ–ª–Ω–∏ –≤ Render)
DATA_RETENTION_DAYS = int(os.getenv("DATA_RETENTION_DAYS", "90"))  # —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è

if not TELEGRAM_TOKEN:
    raise RuntimeError("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω")

if not OPENAI_API_KEY:
    log.warning("‚ö†Ô∏è OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –∏–¥–µ–∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–µ –±—É–¥—É—Ç.")

# ---------- –¢–µ–∫—Å—Ç—ã –ø–æ–ª–∏—Ç–∏–∫–∏ –∏ —É—Å–ª–æ–≤–∏–π (–≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä—è–º–æ –≤ –±–æ—Ç–∞) ----------
PRIVACY_TEXT = (
    "üîí *–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ ‚Äî AI Idea Lab*\n"
    "_–î–∞—Ç–∞: 02.10.2025_\n\n"
    "1) –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ: —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –≤—ã –≤–≤–æ–¥–∏—Ç–µ –≤ —á–∞—Ç (–±—é–¥–∂–µ—Ç/–Ω–∞–≤—ã–∫–∏/–≤—Ä–µ–º—è), –∞ —Ç–∞–∫–∂–µ —Ç–µ—Ö.–º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ Telegram.\n"
    "2) –ó–∞—á–µ–º: –ø–æ–¥–±–æ—Ä –∏–¥–µ–π –∏ —É–ª—É—á—à–µ–Ω–∏–µ –ø–æ–¥—Å–∫–∞–∑–æ–∫.\n"
    "3) –•—Ä–∞–Ω–µ–Ω–∏–µ: –≤ –∑–∞—â–∏—â—ë–Ω–Ω–æ–π Google-—Ç–∞–±–ª–∏—Ü–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 90 –¥–Ω–µ–π. chat_id —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤–∏–¥–µ —Ö—ç—à–∞.\n"
    "4) –ü–µ—Ä–µ–¥–∞—á–∞: Telegram, Google (Sheets), OpenAI ‚Äî —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞. –ù–µ –ø—Ä–æ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ.\n"
    "5) –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –º–∏–Ω–∏–º—É–º –¥–∞–Ω–Ω—ã—Ö, —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ chat_id, –ª–æ–≥–∏ –±–µ–∑ –ü–î–Ω, —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞.\n"
    "6) –í–∞—à–∏ –ø—Ä–∞–≤–∞: –¥–æ—Å—Ç—É–ø/–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/—É–¥–∞–ª–µ–Ω–∏–µ/–∫–æ–ø–∏—è ‚Äî –ø–∏—à–∏—Ç–µ –Ω–∞ contact.aiidealab@gmail.com –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /erase.\n"
)

TERMS_TEXT = (
    "üìÑ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ ‚Äî AI Idea Lab*\n"
    "_–î–∞—Ç–∞: 02.10.2025_\n\n"
    "1) –°–µ—Ä–≤–∏—Å: –±–æ—Ç –≤—ã–¥–∞—ë—Ç –∏–¥–µ–∏ –∏ —à–∞–≥–∏. –ù–µ —Ñ–∏–Ω—Å–æ–≤–µ—Ç/–Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—è –¥–æ—Ö–æ–¥–∞.\n"
    "2) –ó–∞–ø—Ä–µ—â–µ–Ω–æ: –Ω–µ–∑–∞–∫–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç, —Å–ø–∞–º, –ü–î–Ω —Ç—Ä–µ—Ç—å–∏—Ö –ª–∏—Ü –±–µ–∑ –∏—Ö —Å–æ–≥–ª–∞—Å–∏—è.\n"
    "3) –û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å: –º–∞—Ç–µ—Ä–∏–∞–ª—ã ¬´–∫–∞–∫ –µ—Å—Ç—å¬ª, –±–µ–∑ –≥–∞—Ä–∞–Ω—Ç–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.\n"
    "4) –ò–°: —Ç–µ–∫—Å—Ç—ã –±–æ—Ç–∞ –∑–∞—â–∏—â–µ–Ω—ã; –≤—Å—ë, —á—Ç–æ —Å–æ–∑–¥–∞—ë—Ç–µ –ø–æ –∏–¥–µ—è–º ‚Äî –≤–∞—à–µ.\n"
    "5) –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: —Å–º. /privacy.\n"
    "6) –ò–∑–º–µ–Ω–µ–Ω–∏—è: –º–æ–∂–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å —É—Å–ª–æ–≤–∏—è.\n"
    "7) –ö–æ–Ω—Ç–∞–∫—Ç—ã: contact.aiidealab@gmail.com\n"
)

# ---------- Google Sheets ----------
HEADERS = ["timestamp", "chat_id", "budget", "skills", "time_per_week", "ideas_text"]

def connect_sheet():
    creds_json = os.getenv("GOOGLE_CREDENTIALS_JSON")
    if not creds_json:
        raise RuntimeError("GOOGLE_CREDENTIALS_JSON –Ω–µ –∑–∞–¥–∞–Ω")

    try:
        creds_dict = json.loads(creds_json)
    except json.JSONDecodeError:
        raise RuntimeError("GOOGLE_CREDENTIALS_JSON: –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON")

    creds = Credentials.from_service_account_info(
        creds_dict,
        scopes=["https://www.googleapis.com/auth/spreadsheets"]
    )
    client = gspread.authorize(creds)
    sh = client.open_by_key("1uo3yOGDLrA5d9PCeZSEfVepcIuk3raYlFKTpFeVlWgQ")
    ws = sh.sheet1

    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ä–æ–≤–Ω–æ –∫–∞–∫ –Ω—É–∂–Ω–æ
    headers = ws.row_values(1)
    if headers != HEADERS:
        ws.clear()
        ws.append_row(HEADERS)

    log.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheet: %s", SPREADSHEET_NAME)
    return ws

def cleanup_old_rows(ws, days: int):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ä—à–µ N –¥–Ω–µ–π, –æ—Å—Ç–∞–≤–ª—è—è –∑–∞–≥–æ–ª–æ–≤–∫–∏."""
    if days <= 0:
        return
    try:
        records = ws.get_all_records()  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, –Ω–∞—á–∏–Ω–∞—è —Å–æ 2-–π —Å—Ç—Ä–æ–∫–∏
        cutoff = datetime.utcnow() - timedelta(days=days)
        to_keep = []
        for r in records:
            try:
                ts = datetime.fromisoformat(r["timestamp"])
                if ts >= cutoff:
                    to_keep.append([r[h] for h in HEADERS])
            except Exception:
                # –µ—Å–ª–∏ timestamp –∫—Ä–∏–≤–æ–π ‚Äî –Ω–µ —É–¥–∞–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π
                to_keep.append([r[h] for h in HEADERS])

        ws.clear()
        ws.append_row(HEADERS)
        if to_keep:
            ws.append_rows(to_keep)
        log.info("üßπ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –æ—Å—Ç–∞–ª–æ—Å—å %d –∑–∞–ø–∏—Å–µ–π", len(to_keep))
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: %s", e)

SHEET = connect_sheet()
cleanup_old_rows(SHEET, DATA_RETENTION_DAYS)

# ---------- OpenAI ----------
client = OpenAI(api_key=OPENAI_API_KEY) if OPENAI_API_KEY else None

def generate_ideas(budget: str, skills: str, time_per_week: str) -> str:
    fallback = (
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç 3 –∏–¥–µ–∏ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è:\n\n"
        "1) –ß–∞—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–∏—à–∏, –≥–¥–µ —Ç—ã —à–∞—Ä–∏—à—å (—à–∞–±–ª–æ–Ω—ã + –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∏).\n"
        "2) –ú–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å —Å –ò–ò-–æ—Ç–≤–µ—Ç–∞–º–∏ –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–æ–¥–ø–∏—Å–∫–∞).\n"
        "3) –ü–∞–∫–µ—Ç —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤/–≤–æ—Ä–∫—Ñ–ª–æ—É –ø–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –±–æ–ª—å (—Ä–∞–∑–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞ + –∞–ø—Å–µ–π–ª).\n"
    )
    if not client:
        return fallback

    prompt = f"""
–¢—ã ‚Äî –ø—Ä–æ–¥—É–∫—Ç–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π —Ç—Ä–∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∏–¥–µ–∏ –º–∏–∫—Ä–æ–±–∏–∑–Ω–µ—Å–∞ –Ω–∞ –±–∞–∑–µ –ò–ò-—á–∞—Ç–æ–≤.
–£—Å–ª–æ–≤–∏—è:
- –ë—é–¥–∂–µ—Ç –Ω–∞ —Å—Ç–∞—Ä—Ç: {budget}
- –ù–∞–≤—ã–∫–∏/–∏–Ω—Ç–µ—Ä–µ—Å—ã: {skills}
- –í—Ä–µ–º—è –≤ –Ω–µ–¥–µ–ª—é: {time_per_week}

–§–æ—Ä–º–∞—Ç:
‚Äî –ö–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
‚Äî 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è —Ü–µ–Ω–Ω–æ—Å—Ç–∏
‚Äî 3 —à–∞–≥–∞ —Å—Ç–∞—Ä—Ç–∞
‚Äî 1‚Äì2 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –º–æ–Ω–µ—Ç–∏–∑–∞—Ü–∏–∏
–õ–∞–∫–æ–Ω–∏—á–Ω–æ.
"""
    try:
        resp = client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[
                {"role": "system", "content": "–¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –∑–∞–ø—É—Å–∫–∞—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –±–∏–∑–Ω–µ—Å—ã –Ω–∞ –ò–ò, –æ—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–∞–∫—Ç–∏—á–Ω–æ."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.7,
            max_tokens=700,
        )
        return resp.choices[0].message.content.strip()
    except Exception as e:
        log.error("OpenAI error: %s", e)
        return fallback

# ---------- –•–µ–ª–ø–µ—Ä—ã ----------
def hash_chat_id(cid: int) -> str:
    return hashlib.sha256(str(cid).encode("utf-8")).hexdigest()[:16]

# ---------- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞ ----------
CONSENT, BUDGET, SKILLS, TIMEPW = range(4)

CONSENT_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø ü§ñ *AI Idea Lab*.\n\n"
    "–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º: —è –æ–±—Ä–∞–±–æ—Ç–∞—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã (–±—é–¥–∂–µ—Ç/–Ω–∞–≤—ã–∫–∏/–≤—Ä–µ–º—è) —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –∏–¥–µ–π. "
    "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏: /privacy –∏ /terms.\n\n"
    "–ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–µ–Ω ‚Äî –Ω–∞–ø–∏—à–∏ *–°–û–ì–õ–ê–°–ï–ù* (–∏–º–µ–Ω–Ω–æ —ç—Ç–æ —Å–ª–æ–≤–æ)."
)

START_TEXT = (
    "–û–∫! –ù–∞—á–∏–Ω–∞–µ–º.\n\n"
    "üí∞ –°–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –≥–æ—Ç–æ–≤ –≤–ª–æ–∂–∏—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ?\n"
    "_–ü—Ä–∏–º–µ—Ä—ã: 0, 1000, 5000_"
)

# ---------- Handlers ----------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text(CONSENT_TEXT, parse_mode="Markdown")
    return CONSENT

async def catch_consent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (update.message.text or "").strip().upper()
    if text != "–°–û–ì–õ–ê–°–ï–ù":
        await update.message.reply_text("–û–∫! –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ /start.")
        return ConversationHandler.END
    await update.message.reply_text(START_TEXT, parse_mode="Markdown")
    return BUDGET

async def catch_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["budget"] = (update.message.text or "").strip()
    await update.message.reply_text("üß† –ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏ –∏–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã? _–ù–∞–ø–∏—à–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é_", parse_mode="Markdown")
    return SKILLS

async def catch_skills(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["skills"] = (update.message.text or "").strip()
    await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≥–æ—Ç–æ–≤ —É–¥–µ–ª—è—Ç—å –≤ –Ω–µ–¥–µ–ª—é?\n_–ü—Ä–∏–º–µ—Ä: >10 —á–∞—Å–æ–≤/–Ω–µ–¥_", parse_mode="Markdown")
    return TIMEPW

async def catch_time(update: Update, context: ContextTypes.DEFAULT_TYPE):
    budget = (context.user_data.get("budget") or "").strip()
    skills = (context.user_data.get("skills") or "").strip()
    timepw = (update.message.text or "").strip()
    context.user_data["time_per_week"] = timepw

    await update.message.reply_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–¥–µ–∏... —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ ‚åõ")

    ideas = generate_ideas(budget, skills, timepw)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –º–∏–Ω–∏–º—É–º, chat_id –æ–±–µ–∑–ª–∏—á–∏–≤–∞–µ–º
    cid_hashed = hash_chat_id(update.effective_chat.id)
    try:
        SHEET.append_row([
            datetime.utcnow().isoformat(),
            cid_hashed,   # –≤–º–µ—Å—Ç–æ —Ä–µ–∞–ª—å–Ω–æ–≥–æ chat_id
            budget,
            skills,
            timepw,
            ideas
        ])
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheet: %s", e)

    # –ê–¥–º–∏–Ω—É ‚Äî —Ç–æ–ª—å–∫–æ –æ–±–µ–∑–ª–∏—á–µ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if ADMIN_CHAT_ID:
        try:
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=(
                    "üì• –ù–æ–≤—ã–π –ª–∏–¥ (–æ–±–µ–∑–ª–∏—á–µ–Ω–æ)\n"
                    f"‚Ä¢ chat: {cid_hashed}\n"
                    "‚Ä¢ —Å—Ç–∞—Ç—É—Å: –∏–¥–µ–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."
                )
            )
        except Exception as e:
            log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –∞–¥–º–∏–Ω–∞: %s", e)

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    text = (
        "‚úÖ –ì–æ—Ç–æ–≤–æ! –í–æ—Ç –∏–¥–µ–∏ –ø–æ–¥ —Ç–≤–æ–∏ —É—Å–ª–æ–≤–∏—è:\n\n"
        f"{ideas}\n\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å ‚Äî –Ω–∞–ø–∏—à–∏ */more* –∏ —è –¥–æ–∫–∏–Ω—É –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–≥–∏ –∑–∞–ø—É—Å–∫–∞."
    )
    await update.message.reply_text(text, parse_mode="Markdown")
    return ConversationHandler.END

async def cmd_more(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîß –î–æ–ø.—à–∞–≥–∏:\n"
        "1) –í—ã–±–µ—Ä–∏ 1 –∏–¥–µ—é –∏ –æ–ø–∏—à–∏ –µ—ë –≤ 10 —Å—Ç—Ä–æ–∫ (—á—Ç–æ/–¥–ª—è –∫–æ–≥–æ/—Ü–µ–Ω–Ω–æ—Å—Ç—å).\n"
        "2) –°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ 10 –º–µ—Å—Ç, –≥–¥–µ –µ—Å—Ç—å —Ç–≤–æ—è –∞—É–¥–∏—Ç–æ—Ä–∏—è (—á–∞—Ç—ã/–∫–∞–Ω–∞–ª—ã/—Ñ–æ—Ä—É–º—ã).\n"
        "3) –ü–æ–¥–≥–æ—Ç–æ–≤—å 1 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ª–∏–¥-–º–∞–≥–Ω–∏—Ç (—á–µ–∫-–ª–∏—Å—Ç/—à–∞–±–ª–æ–Ω) –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ –µ–≥–æ.\n"
        "4) –°–¥–µ–ª–∞–π 3 –∏—Ç–µ—Ä–∞—Ü–∏–∏ –ø–æ —Ñ–∏–¥–±–µ–∫—É.\n\n"
        "–ì–æ—Ç–æ–≤ –≤—ã–¥–∞—Ç—å –µ—â—ë? –ù–∞–ø–∏—à–∏ */start*.",
        parse_mode="Markdown",
    )

async def cmd_privacy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(PRIVACY_TEXT, parse_mode="Markdown")

async def cmd_terms(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(TERMS_TEXT, parse_mode="Markdown")

async def cmd_erase(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø–æ —Ö—ç—à—É chat_id)."""
    cid_hashed = hash_chat_id(update.effective_chat.id)
    try:
        all_values = SHEET.get_all_values()  # —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤
        if not all_values or len(all_values) < 2:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Å—Ç–æ–ª–±—Ü–∞ chat_id –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
        headers = all_values[0]
        chat_idx = headers.index("chat_id")

        # –£–¥–∞–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ —Å–Ω–∏–∑—É –≤–≤–µ—Ä—Ö, –≥–¥–µ chat_id == cid_hashed
        to_delete = []
        for i in range(len(all_values) - 1, 0, -1):
            row = all_values[i]
            if len(row) > chat_idx and row[chat_idx] == cid_hashed:
                to_delete.append(i + 1)  # –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ª–∏—Å—Ç–∞ —Å 1

        for row_index in to_delete:
            SHEET.delete_rows(row_index)

        if to_delete:
            await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.")
        else:
            await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.")
    except Exception as e:
        log.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: %s", e)
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–∫, –∑–∞–≤–µ—Ä—à–∞—é. –ú–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å /start, –∫–æ–≥–¥–∞ –±—É–¥–µ—à—å –≥–æ—Ç–æ–≤.")
    return ConversationHandler.END

# –§–æ–ª–±—ç–∫–∏ –Ω–∞ –Ω–µ-—Ç–µ–∫—Å—Ç –≤ –¥–∏–∞–ª–æ–≥–µ
async def non_text_in_flow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π —Ç–µ–∫—Å—Ç–æ–º üôè")

def build_app() -> Application:
    app = Application.builder().token(TELEGRAM_TOKEN).build()

    conv = ConversationHandler(
        entry_points=[CommandHandler("start", cmd_start)],
        states={
            CONSENT: [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_consent),
                      MessageHandler(~filters.TEXT, non_text_in_flow)],
            BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_budget),
                     MessageHandler(~filters.TEXT, non_text_in_flow)],
            SKILLS: [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_skills),
                     MessageHandler(~filters.TEXT, non_text_in_flow)],
            TIMEPW: [MessageHandler(filters.TEXT & ~filters.COMMAND, catch_time),
                     MessageHandler(~filters.TEXT, non_text_in_flow)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True,
    )
    app.add_handler(conv)
    app.add_handler(CommandHandler("more", cmd_more))
    app.add_handler(CommandHandler("privacy", cmd_privacy))
    app.add_handler(CommandHandler("terms", cmd_terms))
    app.add_handler(CommandHandler("erase", cmd_erase))
    return app

if __name__ == "__main__":
    app = build_app()

    # –ê–≤—Ç–æ–≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞: –µ—Å–ª–∏ –µ—Å—Ç—å BASE_URL ‚Äî –≤–µ–±—Ö—É–∫ (Render), –∏–Ω–∞—á–µ polling (–ª–æ–∫–∞–ª—å–Ω–æ)
    if WEBHOOK_BASE_URL:
        webhook_url = f"{WEBHOOK_BASE_URL.rstrip('/')}/{WEBHOOK_PATH}"
        log.info("üåê –ó–∞–ø—É—Å–∫–∞—é webhook: %s", webhook_url)
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            url_path=WEBHOOK_PATH,
            webhook_url=webhook_url,
            drop_pending_updates=True
        )
    else:
        log.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        app.run_polling()
