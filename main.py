import os
import json
import logging
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
import openai
import gspread
from google.oauth2.service_account import Credentials

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
SPREADSHEET_NAME = "AI Idea Lab Leads"

# ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI
openai.api_key = OPENAI_API_KEY

# üìÅ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è Google
creds_json = os.getenv("GOOGLE_CREDENTIALS")
if not creds_json:
    raise Exception("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è GOOGLE_CREDENTIALS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")

creds_dict = json.loads(creds_json)

creds = Credentials.from_service_account_info(
    creds_dict,
    scopes=[
        "https://www.googleapis.com/auth/spreadsheets",
        "https://www.googleapis.com/auth/drive"
    ]
)

gc = gspread.authorize(creds)

# üìä –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Ç–∞–±–ª–∏—Ü–µ
try:
    sheet = gc.open(SPREADSHEET_NAME).sheet1
    logger.info(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Google Sheet: {SPREADSHEET_NAME}")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ —Ç–∞–±–ª–∏—Ü–µ: {e}")
    raise

# üì© –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ Telegram
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –¥–∞–Ω–Ω—ã–µ –ª–∏–¥–∞, –∏ —è —Å–æ—Ö—Ä–∞–Ω—é –∏—Ö –≤ —Ç–∞–±–ª–∏—Ü—É.")

async def save_lead(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text}")

    # üß† –ü—Ä–∏–º–µ—Ä –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: –æ–¥–Ω–∞ —è—á–µ–π–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        sheet.append_row([text])
        await update.message.reply_text("‚úÖ –õ–∏–¥ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ç–∞–±–ª–∏—Ü—É!")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ª–∏–¥–∞: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    if not TELEGRAM_TOKEN:
        raise Exception("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

    application = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, save_lead))

    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling()

if __name__ == "__main__":
    main()